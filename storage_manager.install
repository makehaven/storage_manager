<?php

/**
 * @file
 * Install, update, and uninstall functions for the Storage Manager module.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\eck\Entity\EckEntityType;
use Drupal\eck\Entity\EckType;

/**
 * Implements hook_install().
 *
 * Sets the initial schema version and creates necessary entities.
 */
function storage_manager_install() {
  // Set the initial schema version.
  \Drupal::service('keyvalue')->get('system.schema')->set('storage_manager', 10001);

  // Programmatically create the ECK entity types and bundles.
  _storage_manager_create_eck_entities();

  // Seed the storage areas.
  _storage_manager_seed_storage_areas();
  // Seed the storage types.
  _storage_manager_seed_storage_types();
}

/**
 * Creates the necessary ECK entity types and bundles for the module.
 *
 * This function is safe to re-run.
 */
function _storage_manager_create_eck_entities() {
  // Create the 'Storage Unit' entity type if it doesn't exist.
  if (!EckEntityType::load('storage_unit')) {
    $storage_unit_type = EckEntityType::create([
      'id' => 'storage_unit',
      'label' => 'Storage Unit',
      'description' => 'Represents a physical storage unit that can be assigned.',
      'created' => TRUE,
      'changed' => TRUE,
      'uid' => TRUE,
      'title' => FALSE,
    ]);
    $storage_unit_type->save();
  }

  // Create the 'Storage Unit' bundle if it doesn't exist.
  if (!EckType::load('storage_unit')) {
    $storage_unit_bundle = EckType::create([
      'id' => 'storage_unit',
      'eck_entity_type' => 'storage_unit',
      'name' => 'Storage Unit',
      'description' => 'Default bundle for Storage Unit entities.',
    ]);
    $storage_unit_bundle->save();
  }

  // Create the 'Storage Assignment' entity type if it doesn't exist.
  if (!EckEntityType::load('storage_assignment')) {
    $storage_assignment_type = EckEntityType::create([
      'id' => 'storage_assignment',
      'label' => 'Storage Assignment',
      'description' => 'Represents the assignment of a storage unit to a user.',
      'created' => TRUE,
      'changed' => TRUE,
      'uid' => FALSE,
      'title' => FALSE,
    ]);
    $storage_assignment_type->save();
  }

  // Create the 'Storage Assignment' bundle if it doesn't exist.
  if (!EckType::load('storage_assignment')) {
    $storage_assignment_bundle = EckType::create([
      'id' => 'storage_assignment',
      'eck_entity_type' => 'storage_assignment',
      'name' => 'Storage Assignment',
      'description' => 'Default bundle for Storage Assignment entities.',
    ]);
    $storage_assignment_bundle->save();
  }
}


/**
 * Implements hook_update_N().
 *
 * An empty update hook to set the initial schema version.
 */
function storage_manager_update_10001() {
  // This is an empty update hook to set the initial schema version.
  // No database changes are needed.
  return t('Storage Manager module schema updated to 10001.');
}

/**
 * Seed common storage areas (safe to re-run).
 */
function _storage_manager_seed_storage_areas() {
  $vid = 'storage_area';
  $names = ['Metalshop', 'Studio', 'CNC Room'];
  foreach ($names as $name) {
    $exists = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->getQuery()
      ->condition('vid', $vid)
      ->condition('name', $name)
      ->accessCheck(FALSE)
      ->range(0, 1)
      ->execute();
    if (!$exists) {
      Term::create(['vid' => $vid, 'name' => $name])->save();
    }
  }
}

/**
 * Seed common storage types (safe to re-run).
 */
function _storage_manager_seed_storage_types() {
  $vid = 'storage_type';
  $names = ['Small Bin', 'Large Bin'];
  foreach ($names as $name) {
    $exists = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->getQuery()
      ->condition('vid', $vid)
      ->condition('name', $name)
      ->accessCheck(FALSE)
      ->range(0, 1)
      ->execute();
    if (!$exists) {
      Term::create(['vid' => $vid, 'name' => $name])->save();
    }
  }
}