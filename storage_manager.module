<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;

/**
 * @file
 * Primary module file for the Storage Manager module.
 */

/**
 * Implements hook_entity_presave().
 */
function storage_manager_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'storage_unit') {
    $id = $entity->get('field_storage_unit_id')->value;
    if ($id) {
      $query = \Drupal::entityQuery('storage_unit')
        ->condition('field_storage_unit_id', $id)
        ->accessCheck(FALSE)
        ->range(0, 1);

      // Exclude self when updating.
      if (!$entity->isNew()) {
        $query->condition('id', $entity->id(), '<>');
      }
      $exists = $query->execute();
      if ($exists) {
        throw new EntityStorageException(t('Unit ID %id is already in use.', ['%id' => $id]));
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function storage_manager_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'storage_unit') {
    if (!$entity->get('field_storage_unit_id')->value) {
      $entity->set('field_storage_unit_id', $entity->id());
      $entity->save();
    }
  }
}

/**
 * Implements hook_entity_type_build().
 */
function storage_manager_entity_type_build(array &$entity_types) {
  // No debug output. Leave empty unless adding entity tweaks.
}
