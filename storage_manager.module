<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;

/**
 * @file
 * Primary module file for the Storage Manager module.
 */

/**
 * Implements hook_form_alter().
 *
 * Adds custom validation for the storage unit form and hides the status field.
 * Also redirects the user to the dashboard after creating a new storage unit.
 */
function storage_manager_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'storage_unit_storage_unit_form' || $form_id == 'storage_unit_storage_unit_edit_form') {
    // The status field is managed automatically, so hide it from the form.
    if (isset($form['status'])) {
      $form['status']['#access'] = FALSE;
    }
  }

  // Redirect to the dashboard after creating a new storage unit.
  if ($form_id == 'storage_unit_storage_unit_form') {
    $form['actions']['submit']['#submit'][] = '_storage_manager_storage_unit_redirect_submit';
  }
}

/**
 * Form submission handler to redirect to the dashboard.
 *
 * After a new storage unit is created, this handler redirects the user to the
 * storage manager dashboard instead of the entity view page.
 */
function _storage_manager_storage_unit_redirect_submit(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form_state->setRedirect('storage_manager.dashboard');
}

/**
 * Implements hook_entity_insert().
 */
function storage_manager_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'storage_unit') {
    if (!$entity->get('field_storage_unit_id')->value) {
      $entity->set('field_storage_unit_id', $entity->id());
      $entity->save();
    }
  }
}

/**
 * Implements hook_mail().
 */
function storage_manager_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'] ?? '';
  $body = $params['body'] ?? '';
  $body = str_replace(["\r\n", "\r"], "\n", $body);
  $message['body'] = explode("\n", $body);
}
