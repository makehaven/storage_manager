<?php

use Drupal\Core\Entity\EntityInterface;

/**
 * @file
 * Primary module file for the Storage Manager module.
 */

/**
 * Implements hook_entity_presave().
 */
function storage_manager_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'storage_assignment') {
    // When an assignment is being created or updated, if the status is not
    // "Active", then we don't need to do anything.
    $status_field = 'field_storage_assignment_status';
    if (!$entity->hasField($status_field) || $entity->get($status_field)->value !== 'Active') {
      return;
    }

    // If some *other* Active assignment exists for this unit, block.
    $unit_field = 'field_storage_unit';
    if ($entity->hasField($unit_field) && ($unit = $entity->get($unit_field)->entity)) {
      /** @var \Drupal\storage_manager\Service\AssignmentGuard $guard */
      $guard = \Drupal::service('storage_manager.assignment_guard');
      if ($entity->isNew() && $guard->unitHasActiveAssignment($unit->id())) {
        throw new \RuntimeException('This storage unit already has an active assignment.');
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function storage_manager_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'storage_unit_storage_unit_add' || $form_id == 'storage_unit_storage_unit_edit') {
    $form['#validate'][] = '_storage_manager_form_validate_unique_unit_id';
  }
}

/**
 * Custom validation handler for the storage unit form.
 */
function _storage_manager_form_validate_unique_unit_id(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $unit_id = $form_state->getValue('field_storage_unit_id')[0]['value'];
  $entity = $form_state->getFormObject()->getEntity();

  $query = \Drupal::entityQuery('storage_unit')
    ->condition('field_storage_unit_id', $unit_id)
    ->accessCheck(FALSE);

  if (!$entity->isNew()) {
    $query->condition('id', $entity->id(), '<>');
  }

  $ids = $query->execute();

  if (!empty($ids)) {
    $form_state->setErrorByName('field_storage_unit_id', t('The Unit ID must be unique.'));
  }
}

/**
 * Implements hook_entity_insert().
 */
function storage_manager_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'storage_unit') {
    if (!$entity->get('field_storage_unit_id')->value) {
      $entity->set('field_storage_unit_id', $entity->id());
      $entity->save();
    }
  }
}
