<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Url;

/**
 * @file
 * Primary module file for the Storage Manager module.
 */

/**
 * Implements hook_form_alter().
 */
function storage_manager_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'storage_unit_storage_unit_form' || $form_id == 'storage_unit_storage_unit_edit_form') {
    if (isset($form['status'])) {
      $form['status']['#access'] = FALSE;
    }
  }

  if ($form_id == 'storage_unit_storage_unit_form') {
    $form['actions']['submit']['#submit'][] = '_storage_manager_storage_unit_redirect_submit';
  }
}

/**
 * Redirect new storage units back to the dashboard after creation.
 */
function _storage_manager_storage_unit_redirect_submit(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form_state->setRedirect('storage_manager.dashboard');
}

/**
 * Implements hook_entity_insert().
 */
function storage_manager_entity_insert(EntityInterface $entity) {
  switch ($entity->getEntityTypeId()) {
    case 'storage_unit':
      if (!$entity->get('field_storage_unit_id')->value) {
        $entity->set('field_storage_unit_id', $entity->id());
        $entity->save();
      }
      break;

    case 'storage_assignment':
      if ($entity->hasField('title')) {
        $entity->set('title', 'Assignment #' . $entity->id());
        $entity->save();
      }
      break;

    case 'storage_violation':
      if ($entity->hasField('title')) {
        $entity->set('title', 'Violation #' . $entity->id());
        $entity->save();
      }
      break;
  }
}

/**
 * Implements hook_mail().
 */
function storage_manager_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'] ?? '';
  $body = $params['body'] ?? '';
  $body = str_replace(["\r\n", "\r"], "\n", $body);
  $message['body'] = explode("\n", $body);
}

/**
 * Implements hook_entity_type_alter().
 */
function storage_manager_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
  if (isset($entity_types['storage_assignment'])) {
    $entity_types['storage_assignment']->setFormClass('user-release', 'Drupal\storage_manager\Form\UserReleaseForm');
  }
}

/**
 * Implements hook_entity_operation().
 */
function storage_manager_entity_operation(EntityInterface $entity) {
  $operations = [];

  $config = \Drupal::config('storage_manager.settings');
  $stripe_enabled = (bool) $config->get('stripe.enable_billing');
  if (!$stripe_enabled) {
    return [];
  }

  if ($entity->getEntityTypeId() === 'storage_assignment' && \Drupal::currentUser()->hasPermission('manage storage billing')) {
    /** @var \Drupal\storage_manager\Service\StripeAssignmentManager $stripe_manager */
    $stripe_manager = \Drupal::service('storage_manager.stripe_assignment_manager');
    if (!$stripe_manager->isEnabled()) {
      return $operations;
    }

    $operations['stripe_create_or_open'] = [
      'title' => t('Sync & Open Stripe Subscription'),
      'weight' => 50,
      'url' => Url::fromRoute('storage_manager_billing.sub_create_or_open', ['assignment' => $entity->id()]),
    ];
  }

  return $operations;
}

/**
 * Implements hook_eck_entity_presave().
 */
function storage_manager_eck_entity_presave(EntityInterface $entity) {
  switch ($entity->getEntityTypeId()) {
    case 'storage_assignment':
      if (!$entity->isNew() && $entity->hasField('title')) {
        $entity->set('title', 'Assignment #' . $entity->id());
      }
      break;

    case 'storage_violation':
      if (!$entity->isNew() && $entity->hasField('title')) {
        $entity->set('title', 'Violation #' . $entity->id());
      }
      break;
  }
}
